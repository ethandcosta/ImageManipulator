package model;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

/**
 * This class tests the Sharpen function object.
 */
public class SharpenTest {

  Sharpen sharpen;
  ImageProcessor model;

  ImageProcessor model2;
  Pixel[][] ogImage;
  Pixel[][] sharpened;

  Pixel[][] fiveByFive;
  Pixel[][] fiveByFiveSharp;

  @Before
  public void init() {
    sharpen = new Sharpen(false);
    ogImage = new Pixel[2][2];
    ogImage[0][0] = new RGBPixel(0, 0, 255, 8, 8, 8);
    ogImage[0][1] = new RGBPixel(1, 0, 255, 32, 32, 32);
    ogImage[1][0] = new RGBPixel(0, 1, 255, 16, 16, 16);
    ogImage[1][1] = new RGBPixel(1, 1, 255, 4, 4, 4);
    model = new ImageProcessorModel(ogImage, "ogImage");
    sharpened = new Pixel[2][2];
    sharpened[0][0] = new RGBPixel(0, 0, 255, 21, 21, 21);
    sharpened[0][1] = new RGBPixel(1, 0, 255, 39, 39, 39);
    sharpened[1][0] = new RGBPixel(0, 1, 255, 27, 27, 27);
    sharpened[1][1] = new RGBPixel(1, 1, 255, 18, 18, 18);

    fiveByFive = new Pixel[5][5];
    fiveByFive[0][0] = new RGBPixel(0, 0, 255, 8, 8, 8);
    fiveByFive[0][1] = new RGBPixel(1, 0, 255, 32, 32, 32);
    fiveByFive[0][2] = new RGBPixel(2, 0, 255, 8, 8, 8);
    fiveByFive[0][3] = new RGBPixel(3, 0, 255, 32, 32, 32);
    fiveByFive[0][4] = new RGBPixel(4, 0, 255, 8, 8, 8);
    fiveByFive[1][0] = new RGBPixel(0, 1, 255, 32, 32, 32);
    fiveByFive[1][1] = new RGBPixel(1, 1, 255, 8, 8, 8);
    fiveByFive[1][2] = new RGBPixel(2, 1, 255, 32, 32, 32);
    fiveByFive[1][3] = new RGBPixel(3, 1, 255, 8, 8, 8);
    fiveByFive[1][4] = new RGBPixel(4, 1, 255, 32, 32, 32);
    fiveByFive[2][0] = new RGBPixel(0, 2, 255, 8, 8, 8);
    fiveByFive[2][1] = new RGBPixel(1, 2, 255, 32, 32, 32);
    fiveByFive[2][2] = new RGBPixel(2, 2, 255, 8, 8, 8);
    fiveByFive[2][3] = new RGBPixel(3, 2, 255, 32, 32, 32);
    fiveByFive[2][4] = new RGBPixel(4, 2, 255, 8, 8, 8);
    fiveByFive[3][0] = new RGBPixel(0, 3, 255, 32, 32, 32);
    fiveByFive[3][1] = new RGBPixel(1, 3, 255, 8, 8, 8);
    fiveByFive[3][2] = new RGBPixel(2, 3, 255, 32, 32, 32);
    fiveByFive[3][3] = new RGBPixel(3, 3, 255, 8, 8, 8);
    fiveByFive[3][4] = new RGBPixel(4, 3, 255, 32, 32, 32);
    fiveByFive[4][0] = new RGBPixel(0, 4, 255, 8, 8, 8);
    fiveByFive[4][1] = new RGBPixel(1, 4, 255, 32, 32, 32);
    fiveByFive[4][2] = new RGBPixel(2, 4, 255, 8, 8, 8);
    fiveByFive[4][3] = new RGBPixel(3, 4, 255, 32, 32, 32);
    fiveByFive[4][4] = new RGBPixel(4, 4, 255, 8, 8, 8);
    model2 = new ImageProcessorModel(fiveByFive, "fiveByFive");
    fiveByFiveSharp = new Pixel[5][5];
    fiveByFiveSharp[0][0] = new RGBPixel(0, 0, 255,
            15, 15, 15);
    fiveByFiveSharp[0][1] = new RGBPixel(1, 0, 255,
            39, 39, 39);
    fiveByFiveSharp[0][2] = new RGBPixel(2, 0, 255,
            15, 15, 15);
    fiveByFiveSharp[0][3] = new RGBPixel(3, 0, 255,
            39, 39, 39);
    fiveByFiveSharp[0][4] = new RGBPixel(4, 0, 255,
            15, 15, 15);
    fiveByFiveSharp[1][0] = new RGBPixel(0, 1, 255,
            39, 39, 39);
    fiveByFiveSharp[1][1] = new RGBPixel(1, 1, 255,
            29, 29, 29);
    fiveByFiveSharp[1][2] = new RGBPixel(2, 1, 255,
            46, 46, 46);
    fiveByFiveSharp[1][3] = new RGBPixel(3, 1, 255,
            29, 29, 29);
    fiveByFiveSharp[1][4] = new RGBPixel(4, 1, 255,
            39, 39, 39);
    fiveByFiveSharp[2][0] = new RGBPixel(0, 2, 255,
            15, 15, 15);
    fiveByFiveSharp[2][1] = new RGBPixel(1, 2, 255,
            46, 46, 46);
    fiveByFiveSharp[2][2] = new RGBPixel(2, 2, 255,
            8, 8, 8);
    fiveByFiveSharp[2][3] = new RGBPixel(3, 2, 255,
            46, 46, 46);
    fiveByFiveSharp[2][4] = new RGBPixel(4, 2, 255,
            15, 15, 15);
    fiveByFiveSharp[3][0] = new RGBPixel(0, 3, 255,
            39, 39, 39);
    fiveByFiveSharp[3][1] = new RGBPixel(1, 3, 255,
            29, 29, 29);
    fiveByFiveSharp[3][2] = new RGBPixel(2, 3, 255,
            46, 46, 46);
    fiveByFiveSharp[3][3] = new RGBPixel(3, 3, 255,
            29, 29, 29);
    fiveByFiveSharp[3][4] = new RGBPixel(4, 3, 255,
            39, 39, 39);
    fiveByFiveSharp[4][0] = new RGBPixel(0, 4, 255,
            15, 15, 15);
    fiveByFiveSharp[4][1] = new RGBPixel(1, 4, 255,
            39, 39, 39);
    fiveByFiveSharp[4][2] = new RGBPixel(2, 4, 255,
            15, 15, 15);
    fiveByFiveSharp[4][3] = new RGBPixel(3, 4, 255,
            39, 39, 39);
    fiveByFiveSharp[4][4] = new RGBPixel(4, 4, 255,
            15, 15, 15);
  }

  @Test
  public void apply() {
    Pixel[][] result = sharpen.apply(model);

    for (int i = 0; i < result.length; i++) {
      for (int j = 0; j < result[0].length; j++) {
        assertEquals(sharpened[i][j].getColorValue("r"), result[i][j].getColorValue("r"));
        assertEquals(sharpened[i][j].getColorValue("g"), result[i][j].getColorValue("g"));
        assertEquals(sharpened[i][j].getColorValue("b"), result[i][j].getColorValue("b"));
      }
    }

    Pixel[][] result2 = sharpen.apply(model2);
    for (int i = 0; i < result2.length; i++) {
      for (int j = 0; j < result2[0].length; j++) {
        assertEquals(fiveByFiveSharp[i][j].getColorValue("r"), result2[i][j].getColorValue("r"));
        assertEquals(fiveByFiveSharp[i][j].getColorValue("g"), result2[i][j].getColorValue("g"));
        assertEquals(fiveByFiveSharp[i][j].getColorValue("b"), result2[i][j].getColorValue("b"));
      }
    }
  }
}